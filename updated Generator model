{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/ogeelekwa/Dental-Prosthesis-Generator/blob/main/updated%20Generator%20model\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "CUFLYYSBYDYl",
        "outputId": "8c46e8e5-b643-4b1a-8919-b86ab58f554f"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Python version: 3.11.13 (main, Jun  4 2025, 08:57:29) [GCC 11.4.0]\n",
            "PyTorch version: 2.6.0+cu124\n",
            "CUDA version: 12.4\n"
          ]
        }
      ],
      "source": [
        "import sys\n",
        "import torch\n",
        "print(f\"Python version: {sys.version}\")\n",
        "print(f\"PyTorch version: {torch.__version__}\")\n",
        "print(f\"CUDA version: {torch.version.cuda}\")\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 1️⃣  ── make sure you are in a shell / magic cell, not plain Python\n",
        "%pip install -U pip wheel          # keep pip itself modern\n",
        "%pip install -U ninja fvcore iopath  # build helper + runtime deps\n",
        "\n",
        "# 2️⃣  ── compile & install PyTorch3D from the stable branch\n",
        "#       (use MAX_JOBS=1 if Colab RAM is tight → slower but safer)\n",
        "%env MAX_JOBS=4                    # how many compiler processes\n",
        "%pip install --no-cache-dir \"git+https://github.com/facebookresearch/pytorch3d.git@stable\"\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "IX82-wUI6ISY",
        "outputId": "be01ac88-5797-42c7-b561-46cd5e792b33"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: pip in /usr/local/lib/python3.11/dist-packages (25.1.1)\n",
            "Requirement already satisfied: wheel in /usr/local/lib/python3.11/dist-packages (0.45.1)\n",
            "Requirement already satisfied: ninja in /usr/local/lib/python3.11/dist-packages (1.11.1.4)\n",
            "Requirement already satisfied: fvcore in /usr/local/lib/python3.11/dist-packages (0.1.5.post20221221)\n",
            "Requirement already satisfied: iopath in /usr/local/lib/python3.11/dist-packages (0.1.10)\n",
            "Requirement already satisfied: numpy in /usr/local/lib/python3.11/dist-packages (from fvcore) (2.0.2)\n",
            "Requirement already satisfied: yacs>=0.1.6 in /usr/local/lib/python3.11/dist-packages (from fvcore) (0.1.8)\n",
            "Requirement already satisfied: pyyaml>=5.1 in /usr/local/lib/python3.11/dist-packages (from fvcore) (6.0.2)\n",
            "Requirement already satisfied: tqdm in /usr/local/lib/python3.11/dist-packages (from fvcore) (4.67.1)\n",
            "Requirement already satisfied: termcolor>=1.1 in /usr/local/lib/python3.11/dist-packages (from fvcore) (3.1.0)\n",
            "Requirement already satisfied: Pillow in /usr/local/lib/python3.11/dist-packages (from fvcore) (11.2.1)\n",
            "Requirement already satisfied: tabulate in /usr/local/lib/python3.11/dist-packages (from fvcore) (0.9.0)\n",
            "Requirement already satisfied: typing-extensions in /usr/local/lib/python3.11/dist-packages (from iopath) (4.14.0)\n",
            "Requirement already satisfied: portalocker in /usr/local/lib/python3.11/dist-packages (from iopath) (3.2.0)\n",
            "env: MAX_JOBS=4                    # how many compiler processes\n",
            "Collecting git+https://github.com/facebookresearch/pytorch3d.git@stable\n",
            "  Cloning https://github.com/facebookresearch/pytorch3d.git (to revision stable) to /tmp/pip-req-build-jycpcf27\n",
            "  Running command git clone --filter=blob:none --quiet https://github.com/facebookresearch/pytorch3d.git /tmp/pip-req-build-jycpcf27\n",
            "  Running command git checkout -q 75ebeeaea0908c5527e7b1e305fbc7681382db47\n",
            "  Resolved https://github.com/facebookresearch/pytorch3d.git to commit 75ebeeaea0908c5527e7b1e305fbc7681382db47\n",
            "  Preparing metadata (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
            "Requirement already satisfied: iopath in /usr/local/lib/python3.11/dist-packages (from pytorch3d==0.7.8) (0.1.10)\n",
            "Requirement already satisfied: tqdm in /usr/local/lib/python3.11/dist-packages (from iopath->pytorch3d==0.7.8) (4.67.1)\n",
            "Requirement already satisfied: typing-extensions in /usr/local/lib/python3.11/dist-packages (from iopath->pytorch3d==0.7.8) (4.14.0)\n",
            "Requirement already satisfied: portalocker in /usr/local/lib/python3.11/dist-packages (from iopath->pytorch3d==0.7.8) (3.2.0)\n",
            "Building wheels for collected packages: pytorch3d\n",
            "\u001b[33m  DEPRECATION: Building 'pytorch3d' using the legacy setup.py bdist_wheel mechanism, which will be removed in a future version. pip 25.3 will enforce this behaviour change. A possible replacement is to use the standardized build interface by setting the `--use-pep517` option, (possibly combined with `--no-build-isolation`), or adding a `pyproject.toml` file to the source tree of 'pytorch3d'. Discussion can be found at https://github.com/pypa/pip/issues/6334\u001b[0m\u001b[33m\n",
            "\u001b[0m  Building wheel for pytorch3d (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
            "  Created wheel for pytorch3d: filename=pytorch3d-0.7.8-cp311-cp311-linux_x86_64.whl size=60242802 sha256=bac8bf5fc8ac9a454d240110e91fc1bb09ff867e38db5a1a810fd627a341c0e5\n",
            "  Stored in directory: /tmp/pip-ephem-wheel-cache-rl_p2meu/wheels/08/90/1b/df18c3e3634f86278e793b87f37ea4c58d0c36731196122518\n",
            "Successfully built pytorch3d\n",
            "Installing collected packages: pytorch3d\n",
            "Successfully installed pytorch3d-0.7.8\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import torch, pytorch3d, sys\n",
        "print(\"torch :\", torch.__version__)\n",
        "print(\"cuda? :\", torch.cuda.is_available(), torch.version.cuda)\n",
        "print(\"p3d  :\", pytorch3d.__version__)\n",
        "print(\"python:\", sys.version)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ORv8VfmJw0IU",
        "outputId": "51418f82-61cb-4803-fef9-9c7e51a4996a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "torch : 2.6.0+cu124\n",
            "cuda? : True 12.4\n",
            "p3d  : 0.7.8\n",
            "python: 3.11.13 (main, Jun  4 2025, 08:57:29) [GCC 11.4.0]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "%env MAX_JOBS=1\n",
        "%pip install --no-cache-dir \"git+https://github.com/facebookresearch/pytorch3d.git@stable\""
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "jp9VKApdw5mV",
        "outputId": "ea4585ee-c474-48a5-b16d-4fb72396fac0"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "env: MAX_JOBS=1\n",
            "Collecting git+https://github.com/facebookresearch/pytorch3d.git@stable\n",
            "  Cloning https://github.com/facebookresearch/pytorch3d.git (to revision stable) to /tmp/pip-req-build-68m7qlbj\n",
            "  Running command git clone --filter=blob:none --quiet https://github.com/facebookresearch/pytorch3d.git /tmp/pip-req-build-68m7qlbj\n",
            "  Running command git checkout -q 75ebeeaea0908c5527e7b1e305fbc7681382db47\n",
            "  Resolved https://github.com/facebookresearch/pytorch3d.git to commit 75ebeeaea0908c5527e7b1e305fbc7681382db47\n",
            "  Preparing metadata (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
            "Requirement already satisfied: iopath in /usr/local/lib/python3.11/dist-packages (from pytorch3d==0.7.8) (0.1.10)\n",
            "Requirement already satisfied: tqdm in /usr/local/lib/python3.11/dist-packages (from iopath->pytorch3d==0.7.8) (4.67.1)\n",
            "Requirement already satisfied: typing-extensions in /usr/local/lib/python3.11/dist-packages (from iopath->pytorch3d==0.7.8) (4.14.0)\n",
            "Requirement already satisfied: portalocker in /usr/local/lib/python3.11/dist-packages (from iopath->pytorch3d==0.7.8) (3.2.0)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# # Either use a leading !\n",
        "# !pip install --extra-index-url \\\n",
        "#     https://miropsota.github.io/torch_packages_builder \\\n",
        "#     pytorch3d==0.7.8+pt210cu118          # <- example build tag\n",
        "\n",
        "# # OR use the %pip magic (preferred)\n",
        "# %pip install --extra-index-url \\\n",
        "#     https://miropsota.github.io/torch_packages_builder \\\n",
        "#     pytorch3d==0.7.8+pt210cu118\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "eKCscpNy6Lgt",
        "outputId": "539e7de6-8ddb-4622-e724-9e6014aef7fd"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Looking in indexes: https://pypi.org/simple, https://miropsota.github.io/torch_packages_builder\n",
            "\u001b[31mERROR: Could not find a version that satisfies the requirement pytorch3d==0.7.8+pt210cu118 (from versions: 0.7.5+pt1.13.0cpu, 0.7.5+pt1.13.0cu116, 0.7.5+pt1.13.0cu117, 0.7.5+pt1.13.1cpu, 0.7.5+pt1.13.1cu116, 0.7.5+pt1.13.1cu117, 0.7.5+pt2.0.0cpu, 0.7.5+pt2.0.0cu117, 0.7.5+pt2.0.0cu118, 0.7.5+pt2.0.1cpu, 0.7.5+pt2.0.1cu117, 0.7.5+pt2.0.1cu118, 0.7.5+pt2.1.0cpu, 0.7.5+pt2.1.0cu118, 0.7.5+pt2.1.0cu121, 0.7.5+pt2.1.1cpu, 0.7.5+pt2.1.1cu118, 0.7.5+pt2.1.1cu121, 0.7.5+pt2.1.2cpu, 0.7.5+pt2.1.2cu118, 0.7.5+pt2.1.2cu121, 0.7.5+pt2.2.0cpu, 0.7.5+pt2.2.0cu118, 0.7.5+pt2.2.0cu121, 0.7.5+pt2.2.1cpu, 0.7.5+pt2.2.1cu118, 0.7.5+pt2.2.1cu121, 0.7.5+pt2.2.2cpu, 0.7.5+pt2.2.2cu118, 0.7.5+pt2.2.2cu121, 0.7.5+pt2.3.0cpu, 0.7.5+pt2.3.0cu118, 0.7.5+pt2.3.0cu121, 0.7.5+pt2.3.1cpu, 0.7.5+pt2.3.1cu118, 0.7.5+pt2.3.1cu121, 0.7.6+pt1.13.0cpu, 0.7.6+pt1.13.0cu116, 0.7.6+pt1.13.0cu117, 0.7.6+pt1.13.1cpu, 0.7.6+pt1.13.1cu116, 0.7.6+pt1.13.1cu117, 0.7.6+pt2.0.0cpu, 0.7.6+pt2.0.0cu117, 0.7.6+pt2.0.0cu118, 0.7.6+pt2.0.1cpu, 0.7.6+pt2.0.1cu117, 0.7.6+pt2.0.1cu118, 0.7.6+pt2.1.0cpu, 0.7.6+pt2.1.0cu118, 0.7.6+pt2.1.0cu121, 0.7.6+pt2.1.1cpu, 0.7.6+pt2.1.1cu118, 0.7.6+pt2.1.1cu121, 0.7.6+pt2.1.2cpu, 0.7.6+pt2.1.2cu118, 0.7.6+pt2.1.2cu121, 0.7.6+pt2.2.0cpu, 0.7.6+pt2.2.0cu118, 0.7.6+pt2.2.0cu121, 0.7.6+pt2.2.1cpu, 0.7.6+pt2.2.1cu118, 0.7.6+pt2.2.1cu121, 0.7.6+pt2.2.2cpu, 0.7.6+pt2.2.2cu118, 0.7.6+pt2.2.2cu121, 0.7.6+pt2.3.0cpu, 0.7.6+pt2.3.0cu118, 0.7.6+pt2.3.0cu121, 0.7.6+pt2.3.1cpu, 0.7.6+pt2.3.1cu118, 0.7.6+pt2.3.1cu121, 0.7.7+pt1.13.0cpu, 0.7.7+pt1.13.0cu116, 0.7.7+pt1.13.0cu117, 0.7.7+pt1.13.1cpu, 0.7.7+pt1.13.1cu116, 0.7.7+pt1.13.1cu117, 0.7.7+pt2.0.0cpu, 0.7.7+pt2.0.0cu117, 0.7.7+pt2.0.0cu118, 0.7.7+pt2.0.1cpu, 0.7.7+pt2.0.1cu117, 0.7.7+pt2.0.1cu118, 0.7.7+pt2.1.0cpu, 0.7.7+pt2.1.0cu118, 0.7.7+pt2.1.0cu121, 0.7.7+pt2.1.1cpu, 0.7.7+pt2.1.1cu118, 0.7.7+pt2.1.1cu121, 0.7.7+pt2.1.2cpu, 0.7.7+pt2.1.2cu118, 0.7.7+pt2.1.2cu121, 0.7.7+pt2.2.0cpu, 0.7.7+pt2.2.0cu118, 0.7.7+pt2.2.0cu121, 0.7.7+pt2.2.1cpu, 0.7.7+pt2.2.1cu118, 0.7.7+pt2.2.1cu121, 0.7.7+pt2.2.2cpu, 0.7.7+pt2.2.2cu118, 0.7.7+pt2.2.2cu121, 0.7.7+pt2.3.0cpu, 0.7.7+pt2.3.0cu118, 0.7.7+pt2.3.0cu121, 0.7.7+pt2.3.1cpu, 0.7.7+pt2.3.1cu118, 0.7.7+pt2.3.1cu121, 0.7.7+pt2.4.0cpu, 0.7.7+pt2.4.0cu118, 0.7.7+pt2.4.0cu121, 0.7.7+pt2.4.0cu124, 0.7.7+pt2.4.1cpu, 0.7.7+pt2.4.1cu118, 0.7.7+pt2.4.1cu121, 0.7.7+pt2.4.1cu124, 0.7.8+pt1.13.0cpu, 0.7.8+pt1.13.0cu116, 0.7.8+pt1.13.0cu117, 0.7.8+pt1.13.1cpu, 0.7.8+pt1.13.1cu116, 0.7.8+pt1.13.1cu117, 0.7.8+pt2.0.0cpu, 0.7.8+pt2.0.0cu117, 0.7.8+pt2.0.0cu118, 0.7.8+pt2.0.1cpu, 0.7.8+pt2.0.1cu117, 0.7.8+pt2.0.1cu118, 0.7.8+pt2.1.0cpu, 0.7.8+pt2.1.0cu118, 0.7.8+pt2.1.0cu121, 0.7.8+pt2.1.1cpu, 0.7.8+pt2.1.1cu118, 0.7.8+pt2.1.1cu121, 0.7.8+pt2.1.2cpu, 0.7.8+pt2.1.2cu118, 0.7.8+pt2.1.2cu121, 0.7.8+pt2.2.0cpu, 0.7.8+pt2.2.0cu118, 0.7.8+pt2.2.0cu121, 0.7.8+pt2.2.1cpu, 0.7.8+pt2.2.1cu118, 0.7.8+pt2.2.1cu121, 0.7.8+pt2.2.2cpu, 0.7.8+pt2.2.2cu118, 0.7.8+pt2.2.2cu121, 0.7.8+pt2.3.0cpu, 0.7.8+pt2.3.0cu118, 0.7.8+pt2.3.0cu121, 0.7.8+pt2.3.1cpu, 0.7.8+pt2.3.1cu118, 0.7.8+pt2.3.1cu121, 0.7.8+pt2.4.0cpu, 0.7.8+pt2.4.0cu118, 0.7.8+pt2.4.0cu121, 0.7.8+pt2.4.0cu124, 0.7.8+pt2.4.1cpu, 0.7.8+pt2.4.1cu118, 0.7.8+pt2.4.1cu121, 0.7.8+pt2.4.1cu124, 0.7.8+pt2.5.0cpu, 0.7.8+pt2.5.0cu118, 0.7.8+pt2.5.0cu121, 0.7.8+pt2.5.0cu124, 0.7.8+pt2.5.1cpu, 0.7.8+pt2.5.1cu118, 0.7.8+pt2.5.1cu121, 0.7.8+pt2.5.1cu124, 0.7.8+pt2.6.0cpu, 0.7.8+pt2.6.0cu118, 0.7.8+pt2.6.0cu124, 0.7.8+pt2.6.0cu126, 0.7.8+pt2.7.0cpu, 0.7.8+pt2.7.0cu118, 0.7.8+pt2.7.0cu126, 0.7.8+pt2.7.0cu128)\u001b[0m\u001b[31m\n",
            "\u001b[0m\u001b[31mERROR: No matching distribution found for pytorch3d==0.7.8+pt210cu118\u001b[0m\u001b[31m\n",
            "\u001b[0mLooking in indexes: https://pypi.org/simple, https://miropsota.github.io/torch_packages_builder\n",
            "\u001b[31mERROR: Could not find a version that satisfies the requirement pytorch3d==0.7.8+pt210cu118 (from versions: 0.7.5+pt1.13.0cpu, 0.7.5+pt1.13.0cu116, 0.7.5+pt1.13.0cu117, 0.7.5+pt1.13.1cpu, 0.7.5+pt1.13.1cu116, 0.7.5+pt1.13.1cu117, 0.7.5+pt2.0.0cpu, 0.7.5+pt2.0.0cu117, 0.7.5+pt2.0.0cu118, 0.7.5+pt2.0.1cpu, 0.7.5+pt2.0.1cu117, 0.7.5+pt2.0.1cu118, 0.7.5+pt2.1.0cpu, 0.7.5+pt2.1.0cu118, 0.7.5+pt2.1.0cu121, 0.7.5+pt2.1.1cpu, 0.7.5+pt2.1.1cu118, 0.7.5+pt2.1.1cu121, 0.7.5+pt2.1.2cpu, 0.7.5+pt2.1.2cu118, 0.7.5+pt2.1.2cu121, 0.7.5+pt2.2.0cpu, 0.7.5+pt2.2.0cu118, 0.7.5+pt2.2.0cu121, 0.7.5+pt2.2.1cpu, 0.7.5+pt2.2.1cu118, 0.7.5+pt2.2.1cu121, 0.7.5+pt2.2.2cpu, 0.7.5+pt2.2.2cu118, 0.7.5+pt2.2.2cu121, 0.7.5+pt2.3.0cpu, 0.7.5+pt2.3.0cu118, 0.7.5+pt2.3.0cu121, 0.7.5+pt2.3.1cpu, 0.7.5+pt2.3.1cu118, 0.7.5+pt2.3.1cu121, 0.7.6+pt1.13.0cpu, 0.7.6+pt1.13.0cu116, 0.7.6+pt1.13.0cu117, 0.7.6+pt1.13.1cpu, 0.7.6+pt1.13.1cu116, 0.7.6+pt1.13.1cu117, 0.7.6+pt2.0.0cpu, 0.7.6+pt2.0.0cu117, 0.7.6+pt2.0.0cu118, 0.7.6+pt2.0.1cpu, 0.7.6+pt2.0.1cu117, 0.7.6+pt2.0.1cu118, 0.7.6+pt2.1.0cpu, 0.7.6+pt2.1.0cu118, 0.7.6+pt2.1.0cu121, 0.7.6+pt2.1.1cpu, 0.7.6+pt2.1.1cu118, 0.7.6+pt2.1.1cu121, 0.7.6+pt2.1.2cpu, 0.7.6+pt2.1.2cu118, 0.7.6+pt2.1.2cu121, 0.7.6+pt2.2.0cpu, 0.7.6+pt2.2.0cu118, 0.7.6+pt2.2.0cu121, 0.7.6+pt2.2.1cpu, 0.7.6+pt2.2.1cu118, 0.7.6+pt2.2.1cu121, 0.7.6+pt2.2.2cpu, 0.7.6+pt2.2.2cu118, 0.7.6+pt2.2.2cu121, 0.7.6+pt2.3.0cpu, 0.7.6+pt2.3.0cu118, 0.7.6+pt2.3.0cu121, 0.7.6+pt2.3.1cpu, 0.7.6+pt2.3.1cu118, 0.7.6+pt2.3.1cu121, 0.7.7+pt1.13.0cpu, 0.7.7+pt1.13.0cu116, 0.7.7+pt1.13.0cu117, 0.7.7+pt1.13.1cpu, 0.7.7+pt1.13.1cu116, 0.7.7+pt1.13.1cu117, 0.7.7+pt2.0.0cpu, 0.7.7+pt2.0.0cu117, 0.7.7+pt2.0.0cu118, 0.7.7+pt2.0.1cpu, 0.7.7+pt2.0.1cu117, 0.7.7+pt2.0.1cu118, 0.7.7+pt2.1.0cpu, 0.7.7+pt2.1.0cu118, 0.7.7+pt2.1.0cu121, 0.7.7+pt2.1.1cpu, 0.7.7+pt2.1.1cu118, 0.7.7+pt2.1.1cu121, 0.7.7+pt2.1.2cpu, 0.7.7+pt2.1.2cu118, 0.7.7+pt2.1.2cu121, 0.7.7+pt2.2.0cpu, 0.7.7+pt2.2.0cu118, 0.7.7+pt2.2.0cu121, 0.7.7+pt2.2.1cpu, 0.7.7+pt2.2.1cu118, 0.7.7+pt2.2.1cu121, 0.7.7+pt2.2.2cpu, 0.7.7+pt2.2.2cu118, 0.7.7+pt2.2.2cu121, 0.7.7+pt2.3.0cpu, 0.7.7+pt2.3.0cu118, 0.7.7+pt2.3.0cu121, 0.7.7+pt2.3.1cpu, 0.7.7+pt2.3.1cu118, 0.7.7+pt2.3.1cu121, 0.7.7+pt2.4.0cpu, 0.7.7+pt2.4.0cu118, 0.7.7+pt2.4.0cu121, 0.7.7+pt2.4.0cu124, 0.7.7+pt2.4.1cpu, 0.7.7+pt2.4.1cu118, 0.7.7+pt2.4.1cu121, 0.7.7+pt2.4.1cu124, 0.7.8+pt1.13.0cpu, 0.7.8+pt1.13.0cu116, 0.7.8+pt1.13.0cu117, 0.7.8+pt1.13.1cpu, 0.7.8+pt1.13.1cu116, 0.7.8+pt1.13.1cu117, 0.7.8+pt2.0.0cpu, 0.7.8+pt2.0.0cu117, 0.7.8+pt2.0.0cu118, 0.7.8+pt2.0.1cpu, 0.7.8+pt2.0.1cu117, 0.7.8+pt2.0.1cu118, 0.7.8+pt2.1.0cpu, 0.7.8+pt2.1.0cu118, 0.7.8+pt2.1.0cu121, 0.7.8+pt2.1.1cpu, 0.7.8+pt2.1.1cu118, 0.7.8+pt2.1.1cu121, 0.7.8+pt2.1.2cpu, 0.7.8+pt2.1.2cu118, 0.7.8+pt2.1.2cu121, 0.7.8+pt2.2.0cpu, 0.7.8+pt2.2.0cu118, 0.7.8+pt2.2.0cu121, 0.7.8+pt2.2.1cpu, 0.7.8+pt2.2.1cu118, 0.7.8+pt2.2.1cu121, 0.7.8+pt2.2.2cpu, 0.7.8+pt2.2.2cu118, 0.7.8+pt2.2.2cu121, 0.7.8+pt2.3.0cpu, 0.7.8+pt2.3.0cu118, 0.7.8+pt2.3.0cu121, 0.7.8+pt2.3.1cpu, 0.7.8+pt2.3.1cu118, 0.7.8+pt2.3.1cu121, 0.7.8+pt2.4.0cpu, 0.7.8+pt2.4.0cu118, 0.7.8+pt2.4.0cu121, 0.7.8+pt2.4.0cu124, 0.7.8+pt2.4.1cpu, 0.7.8+pt2.4.1cu118, 0.7.8+pt2.4.1cu121, 0.7.8+pt2.4.1cu124, 0.7.8+pt2.5.0cpu, 0.7.8+pt2.5.0cu118, 0.7.8+pt2.5.0cu121, 0.7.8+pt2.5.0cu124, 0.7.8+pt2.5.1cpu, 0.7.8+pt2.5.1cu118, 0.7.8+pt2.5.1cu121, 0.7.8+pt2.5.1cu124, 0.7.8+pt2.6.0cpu, 0.7.8+pt2.6.0cu118, 0.7.8+pt2.6.0cu124, 0.7.8+pt2.6.0cu126, 0.7.8+pt2.7.0cpu, 0.7.8+pt2.7.0cu118, 0.7.8+pt2.7.0cu126, 0.7.8+pt2.7.0cu128)\u001b[0m\u001b[31m\n",
            "\u001b[0m\u001b[31mERROR: No matching distribution found for pytorch3d==0.7.8+pt210cu118\u001b[0m\u001b[31m\n",
            "\u001b[0m"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pytorch3d\n",
        "!pip install trimesh\n",
        "load_stl_with_trimesh = True"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "qzG9XBsu4DXw",
        "outputId": "507962a9-c261-45ee-e400-7fd40e220914"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: trimesh in /usr/local/lib/python3.11/dist-packages (4.6.13)\n",
            "Requirement already satisfied: numpy>=1.20 in /usr/local/lib/python3.11/dist-packages (from trimesh) (2.0.2)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "hxcNpVPYYdxw"
      },
      "outputs": [],
      "source": [
        "import os\n",
        "#import torch\n",
        "from pytorch3d.io import load_obj, save_obj\n",
        "from pytorch3d.structures import Meshes\n",
        "from pytorch3d.utils import ico_sphere\n",
        "from pytorch3d.ops import sample_points_from_meshes\n",
        "from pytorch3d.loss import (\n",
        "    chamfer_distance,\n",
        "    mesh_edge_loss,\n",
        "    mesh_laplacian_smoothing,\n",
        "    mesh_normal_consistency,\n",
        ")\n",
        "import numpy as np\n",
        "from tqdm.notebook import tqdm\n",
        "%matplotlib notebook\n",
        "from mpl_toolkits.mplot3d import Axes3D\n",
        "import matplotlib.pyplot as plt\n",
        "import matplotlib as mpl\n",
        "mpl.rcParams['savefig.dpi'] = 80\n",
        "mpl.rcParams['figure.dpi'] = 80\n",
        "\n",
        "# Setting the device(CUDA)\n",
        "if torch.cuda.is_available():\n",
        "    device = torch.device(\"cuda:0\")\n",
        "else:\n",
        "    device = torch.device(\"cpu\")\n",
        "    print(\"WARNING: CPU only, this will be slow!\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "_ZR3hDVH3pUP"
      },
      "outputs": [],
      "source": [
        "# from pytorch3d.io import load_obj\n",
        "# from pytorch3d.structures import Meshes\n",
        "# import torch\n",
        "# import io\n",
        "\n",
        "# device = torch.device(\"cuda:0\" if torch.cuda.is_available() else \"cpu\")\n",
        "\n",
        "# # ------------------------------------------------------------\n",
        "# # Option 1: Load with encoding + normal filtering\n",
        "# # ------------------------------------------------------------\n",
        "# def load_obj_safely(file_path):\n",
        "#     cleaned_lines = []\n",
        "#     with open(file_path, \"r\", encoding='latin-1') as f:\n",
        "#         for line in f:\n",
        "#             if line.startswith(\"vn \"):\n",
        "#                 parts = line.strip().split()\n",
        "#                 if len(parts) == 4:  # \"vn\" + 3 values\n",
        "#                     cleaned_lines.append(line)\n",
        "#                 else:\n",
        "#                     print(f\"Skipping invalid normal: {line.strip()}\")\n",
        "#             else:\n",
        "#                 cleaned_lines.append(line)\n",
        "\n",
        "#     file_obj = io.StringIO(\"\".join(cleaned_lines))\n",
        "#     return load_obj(file_obj)\n",
        "\n",
        "# verts, faces, aux = load_obj_safely(trg_obj)\n",
        "\n",
        "# # ------------------------------------------------------------\n",
        "# # Option 2: Use trimesh (uncomment if needed)\n",
        "# # ------------------------------------------------------------\n",
        "# # import trimesh\n",
        "# # mesh = trimesh.load(trg_obj, process=False, maintain_order=True)\n",
        "# # verts = torch.tensor(mesh.vertices, dtype=torch.float32)\n",
        "# # faces_idx = torch.tensor(mesh.faces, dtype=torch.int64)\n",
        "# # verts = verts.to(device)\n",
        "# # faces_idx = faces_idx.to(device)\n",
        "\n",
        "# # ------------------------------------------------------------\n",
        "# # Process vertices and faces\n",
        "# # ------------------------------------------------------------\n",
        "# faces_idx = faces.verts_idx.to(device)\n",
        "# verts = verts.to(device)\n",
        "\n",
        "# # Center and scale the mesh\n",
        "# center = verts.mean(0)\n",
        "# verts = verts - center\n",
        "# scale = max(verts.abs().max(0)[0])\n",
        "# verts = verts / scale\n",
        "\n",
        "# # Create the PyTorch3D mesh\n",
        "# trg_mesh = Meshes(verts=[verts], faces=[faces_idx])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "OnqWZQaOYkrZ"
      },
      "outputs": [],
      "source": [
        "#Loading .obj object and creating mesh object\n",
        "\n",
        "#!wget https://dl.fbaipublicfiles.com/pytorch3d/data/dolphin/dolphin.obj\n",
        "\n",
        "# Loading the dolphin mesh.\n",
        "trg_stl = os.path.join('/content/040_m_77y_OK_proth.stl')\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "bZeN6FMOMa8d"
      },
      "outputs": [],
      "source": [
        "from pytorch3d.structures import Meshes\n",
        "import torch\n",
        "import trimesh\n",
        "\n",
        "device = torch.device(\"cuda:0\" if torch.cuda.is_available() else \"cpu\")\n",
        "\n",
        "def load_stl_with_trimesh(file_path):\n",
        "    # Load STL file using trimesh\n",
        "    mesh = trimesh.load(file_path, process=False, maintain_order=True)\n",
        "\n",
        "    # Convert to PyTorch tensors\n",
        "    verts = torch.tensor(mesh.vertices, dtype=torch.float32)\n",
        "    faces_idx = torch.tensor(mesh.faces, dtype=torch.int64)\n",
        "\n",
        "    return verts, faces_idx\n",
        "\n",
        "# Load your STL file\n",
        "verts, faces_idx = load_stl_with_trimesh(trg_stl)\n",
        "\n",
        "# Move to device\n",
        "verts = verts.to(device)\n",
        "faces_idx = faces_idx.to(device)\n",
        "\n",
        "# Center and scale the mesh\n",
        "center = verts.mean(0)\n",
        "verts = verts - center\n",
        "scale = max(verts.abs().max(0)[0])\n",
        "verts = verts / scale\n",
        "\n",
        "# Create the PyTorch3D mesh\n",
        "trg_mesh = Meshes(verts=[verts], faces=[faces_idx])\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "KOglvppwMs-a"
      },
      "outputs": [],
      "source": [
        "# Load the target 3D model using trimesh for STL support\n",
        "import trimesh\n",
        "\n",
        "def load_stl_safely(file_path):\n",
        "    \"\"\"Load STL file and return vertices and faces for PyTorch3D\"\"\"\n",
        "    mesh = trimesh.load(file_path, process=True)\n",
        "    verts = torch.tensor(mesh.vertices, dtype=torch.float32)\n",
        "    faces_idx = torch.tensor(mesh.faces, dtype=torch.int64)\n",
        "    return verts, faces_idx\n",
        "\n",
        "# Load your STL file\n",
        "verts, faces_idx = load_stl_safely(trg_stl)  # Changed from trg_obj to trg_stl_file\n",
        "\n",
        "# Move tensors to device\n",
        "faces_idx = faces_idx.to(device)  # Direct assignment since we already have faces_idx\n",
        "verts = verts.to(device)\n",
        "\n",
        "# Center and scale the mesh\n",
        "center = verts.mean(0)\n",
        "verts = verts - center\n",
        "scale = max(verts.abs().max(0)[0])\n",
        "verts = verts / scale\n",
        "\n",
        "# Construct a Meshes structure for the target mesh\n",
        "trg_mesh = Meshes(verts=[verts], faces=[faces_idx])\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "pnTFC24jZToS"
      },
      "outputs": [],
      "source": [
        "# We initialize the source shape to be a sphere of radius 1\n",
        "src_mesh = ico_sphere(4, device)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "-Ey1ci9yZoIc"
      },
      "outputs": [],
      "source": [
        "#visualizing the source and target meshes\n",
        "def plot_pointcloud(mesh, title=\"\"):\n",
        "    # Sampling points uniformly from the surface of the mesh.\n",
        "    points = sample_points_from_meshes(mesh, 5000)\n",
        "    x, y, z = points.clone().detach().cpu().squeeze().unbind(1)\n",
        "    fig = plt.figure(figsize=(5, 5))\n",
        "    ax = Axes3D(fig)\n",
        "    ax.scatter3D(x, z, -y)\n",
        "    ax.set_xlabel('x')\n",
        "    ax.set_ylabel('z')\n",
        "    ax.set_zlabel('y')\n",
        "    ax.set_title(title)\n",
        "    ax.view_init(190, 30)\n",
        "    plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "2fpHo3vEZ09D",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 52
        },
        "outputId": "43997763-79d6-424b-9c57-0724f7cce10c"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 400x400 with 0 Axes>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 400x400 with 0 Axes>"
            ]
          },
          "metadata": {}
        }
      ],
      "source": [
        "# %matplotlib notebook\n",
        "plot_pointcloud(trg_mesh, \"Target mesh\")\n",
        "plot_pointcloud(src_mesh, \"Source mesh\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "qUH2ga4lZ32s"
      },
      "outputs": [],
      "source": [
        "#Optimization Loop\n",
        "#deforming source mesh by offsetting its vertices\n",
        "deform_verts = torch.full(src_mesh.verts_packed().shape, 0.0, device=device, requires_grad=True)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "tpWleWrzaDob"
      },
      "outputs": [],
      "source": [
        "# The optimizer\n",
        "optimizer = torch.optim.SGD([deform_verts], lr=1.0, momentum=0.9)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "tIzdvsSIaGMR",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 535,
          "referenced_widgets": [
            "9ffc342e63014c9c9f3f6a1214dbef96",
            "add1b34b2d3e4a60b66d0d6ff45d2446",
            "ebdd0ec30b1a467082a4913084fa1aba",
            "d3db434f227647d9a16b9579321d37fa",
            "2b69b8f655334f9a91907d398a322b07",
            "f36f319a149a4d22b3fdcc07ca471aa4",
            "062450fcd78f45d5b5e7a0a960ea7a7b",
            "02adddf990d24795a9e50690c3110b00",
            "4be4c6d389ea418485f3213991562be8",
            "5a346293e28646ccbf8a89f5957c1fac",
            "e241f6cd1b87425091fa31e64f7787db"
          ]
        },
        "outputId": "c6ffb1b1-435f-47a1-cd72-d3e5fac3e72d"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "  0%|          | 0/7000 [00:00<?, ?it/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "9ffc342e63014c9c9f3f6a1214dbef96"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 400x400 with 0 Axes>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 400x400 with 0 Axes>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 400x400 with 0 Axes>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 400x400 with 0 Axes>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 400x400 with 0 Axes>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 400x400 with 0 Axes>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 400x400 with 0 Axes>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 400x400 with 0 Axes>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 400x400 with 0 Axes>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 400x400 with 0 Axes>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 400x400 with 0 Axes>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 400x400 with 0 Axes>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 400x400 with 0 Axes>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 400x400 with 0 Axes>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 400x400 with 0 Axes>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 400x400 with 0 Axes>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 400x400 with 0 Axes>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 400x400 with 0 Axes>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 400x400 with 0 Axes>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 400x400 with 0 Axes>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 400x400 with 0 Axes>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 400x400 with 0 Axes>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 400x400 with 0 Axes>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 400x400 with 0 Axes>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 400x400 with 0 Axes>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 400x400 with 0 Axes>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 400x400 with 0 Axes>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 400x400 with 0 Axes>"
            ]
          },
          "metadata": {}
        }
      ],
      "source": [
        "# Number of optimization steps\n",
        "Niter = 7000\n",
        "# Weight for the chamfer loss\n",
        "w_chamfer = 1.0\n",
        "# Weight for mesh edge loss\n",
        "w_edge = 1.0\n",
        "# Weight for mesh normal consistency\n",
        "w_normal = 0.01\n",
        "# Weight for mesh laplacian smoothing\n",
        "w_laplacian = 0.1\n",
        "# Plot period for the losses\n",
        "plot_period = 250\n",
        "loop = tqdm(range(Niter))\n",
        "\n",
        "chamfer_losses = []\n",
        "laplacian_losses = []\n",
        "edge_losses = []\n",
        "normal_losses = []\n",
        "\n",
        "%matplotlib inline\n",
        "\n",
        "for i in loop:\n",
        "    # Initializing optimizer\n",
        "    optimizer.zero_grad()\n",
        "\n",
        "    # Deforming the mesh\n",
        "    new_src_mesh = src_mesh.offset_verts(deform_verts)\n",
        "\n",
        "    # Sampling 5k points from the surface of each mesh\n",
        "    sample_trg = sample_points_from_meshes(trg_mesh, 10000)\n",
        "    sample_src = sample_points_from_meshes(new_src_mesh, 10000)\n",
        "\n",
        "    # comparing the two sets of pointclouds by computing: (a) the chamfer loss\n",
        "    loss_chamfer, _ = chamfer_distance(sample_trg, sample_src)\n",
        "\n",
        "    # and (b) the edge length of the predicted mesh\n",
        "    loss_edge = mesh_edge_loss(new_src_mesh)\n",
        "\n",
        "    # mesh normal consistency\n",
        "    loss_normal = mesh_normal_consistency(new_src_mesh)\n",
        "\n",
        "    # mesh laplacian smoothing\n",
        "    loss_laplacian = mesh_laplacian_smoothing(new_src_mesh, method=\"uniform\")\n",
        "\n",
        "    # Weighted sum of the losses\n",
        "    loss = loss_chamfer * w_chamfer + loss_edge * w_edge + loss_normal * w_normal + loss_laplacian * w_laplacian\n",
        "\n",
        "    # Print the losses\n",
        "    loop.set_description('total_loss = %.6f' % loss)\n",
        "\n",
        "    # Save the losses for plotting\n",
        "    chamfer_losses.append(float(loss_chamfer.detach().cpu()))\n",
        "    edge_losses.append(float(loss_edge.detach().cpu()))\n",
        "    normal_losses.append(float(loss_normal.detach().cpu()))\n",
        "    laplacian_losses.append(float(loss_laplacian.detach().cpu()))\n",
        "\n",
        "    # Plot mesh\n",
        "    if i % plot_period == 0:\n",
        "        plot_pointcloud(new_src_mesh, title=\"iter: %d\" % i)\n",
        "\n",
        "    # Optimization step\n",
        "    loss.backward()\n",
        "    optimizer.step()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "LWk2-YWDas9a",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 401
        },
        "outputId": "af791a6d-45cc-4f10-8eb0-e4120058ade6"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1040x400 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "#Visualizing the Loss\n",
        "fig = plt.figure(figsize=(13, 5))\n",
        "ax = fig.gca()\n",
        "ax.plot(chamfer_losses, label=\"chamfer loss\")\n",
        "ax.plot(edge_losses, label=\"edge loss\")\n",
        "ax.plot(normal_losses, label=\"normal loss\")\n",
        "ax.plot(laplacian_losses, label=\"laplacian loss\")\n",
        "ax.legend(fontsize=\"16\")\n",
        "ax.set_xlabel(\"Iteration\", fontsize=\"16\")\n",
        "ax.set_ylabel(\"Loss\", fontsize=\"16\")\n",
        "ax.set_title(\"Loss vs iterations\", fontsize=\"16\");"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "PLZ_eq9Zax5d"
      },
      "outputs": [],
      "source": [
        "#saving the predicted mesh\n",
        "# Fetching the verts and faces of the final predicted mesh\n",
        "final_verts, final_faces = new_src_mesh.get_mesh_verts_faces(0)\n",
        "\n",
        "# Scaling normalize back to the original target size\n",
        "final_verts = final_verts * scale + center\n",
        "\n",
        "# Storing the predicted mesh using save_obj\n",
        "final_obj = os.path.join('./', '040_.obj')\n",
        "save_obj(final_obj, final_verts, final_faces)"
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "qP5EJ_EaBOWh"
      },
      "execution_count": null,
      "outputs": []
    }
  ],
  "metadata": {
    "accelerator": "GPU",
    "colab": {
      "gpuType": "T4",
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python"
    },
    "widgets": {
      "application/vnd.jupyter.widget-state+json": {
        "9ffc342e63014c9c9f3f6a1214dbef96": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_add1b34b2d3e4a60b66d0d6ff45d2446",
              "IPY_MODEL_ebdd0ec30b1a467082a4913084fa1aba",
              "IPY_MODEL_d3db434f227647d9a16b9579321d37fa"
            ],
            "layout": "IPY_MODEL_2b69b8f655334f9a91907d398a322b07"
          }
        },
        "add1b34b2d3e4a60b66d0d6ff45d2446": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_f36f319a149a4d22b3fdcc07ca471aa4",
            "placeholder": "​",
            "style": "IPY_MODEL_062450fcd78f45d5b5e7a0a960ea7a7b",
            "value": "total_loss = 0.004665: 100%"
          }
        },
        "ebdd0ec30b1a467082a4913084fa1aba": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_02adddf990d24795a9e50690c3110b00",
            "max": 7000,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_4be4c6d389ea418485f3213991562be8",
            "value": 7000
          }
        },
        "d3db434f227647d9a16b9579321d37fa": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_5a346293e28646ccbf8a89f5957c1fac",
            "placeholder": "​",
            "style": "IPY_MODEL_e241f6cd1b87425091fa31e64f7787db",
            "value": " 7000/7000 [02:10&lt;00:00, 57.20it/s]"
          }
        },
        "2b69b8f655334f9a91907d398a322b07": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "f36f319a149a4d22b3fdcc07ca471aa4": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "062450fcd78f45d5b5e7a0a960ea7a7b": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "02adddf990d24795a9e50690c3110b00": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "4be4c6d389ea418485f3213991562be8": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "5a346293e28646ccbf8a89f5957c1fac": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "e241f6cd1b87425091fa31e64f7787db": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        }
      }
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}